{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.modals = new Map();\n  }\n  // Inicializar un modal de Bootstrap\n  inicializar(id) {\n    const modalElement = document.getElementById(id);\n    if (modalElement) {\n      // Asegurarse de que bootstrap está disponible\n      if (typeof window.bootstrap !== 'undefined') {\n        const modalInstance = new window.bootstrap.Modal(modalElement);\n        this.modals.set(id, modalInstance);\n      } else {\n        console.error('Bootstrap no está disponible');\n      }\n    } else {\n      console.error(`Elemento con ID ${id} no encontrado`);\n    }\n  }\n  // Mostrar un modal\n  mostrar(id) {\n    const modal = this.modals.get(id);\n    if (modal) {\n      modal.show();\n    } else {\n      this.inicializar(id);\n      setTimeout(() => this.mostrar(id), 100);\n    }\n  }\n  // Ocultar un modal\n  ocultar(id) {\n    const modal = this.modals.get(id);\n    if (modal) {\n      modal.hide();\n    }\n  }\n  static {\n    this.ɵfac = function ModalService_Factory(t) {\n      return new (t || ModalService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ModalService,\n      factory: ModalService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["ModalService","constructor","modals","Map","inicializar","id","modalElement","document","getElementById","window","bootstrap","modalInstance","Modal","set","console","error","mostrar","modal","get","show","setTimeout","ocultar","hide","factory","ɵfac","providedIn"],"sources":["C:\\Users\\angel\\JobProjects\\FrontEnd\\gestion-usuarios\\src\\app\\services\\modal.service.ts"],"sourcesContent":["// src/app/services/modal.service.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: Map<string, any> = new Map();\n\n  constructor() {}\n\n  // Inicializar un modal de Bootstrap\n  inicializar(id: string): void {\n    const modalElement = document.getElementById(id);\n    if (modalElement) {\n      // Asegurarse de que bootstrap está disponible\n      if (typeof (window as any).bootstrap !== 'undefined') {\n        const modalInstance = new (window as any).bootstrap.Modal(modalElement);\n        this.modals.set(id, modalInstance);\n      } else {\n        console.error('Bootstrap no está disponible');\n      }\n    } else {\n      console.error(`Elemento con ID ${id} no encontrado`);\n    }\n  }\n\n  // Mostrar un modal\n  mostrar(id: string): void {\n    const modal = this.modals.get(id);\n    if (modal) {\n      modal.show();\n    } else {\n      this.inicializar(id);\n      setTimeout(() => this.mostrar(id), 100);\n    }\n  }\n\n  // Ocultar un modal\n  ocultar(id: string): void {\n    const modal = this.modals.get(id);\n    if (modal) {\n      modal.hide();\n    }\n  }\n}\n"],"mappings":";AAMA,OAAM,MAAOA,YAAY;EAGvBC,YAAA;IAFQ,KAAAC,MAAM,GAAqB,IAAIC,GAAG,EAAE;EAE7B;EAEf;EACAC,WAAWA,CAACC,EAAU;IACpB,MAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAc,CAACH,EAAE,CAAC;IAChD,IAAIC,YAAY,EAAE;MAChB;MACA,IAAI,OAAQG,MAAc,CAACC,SAAS,KAAK,WAAW,EAAE;QACpD,MAAMC,aAAa,GAAG,IAAKF,MAAc,CAACC,SAAS,CAACE,KAAK,CAACN,YAAY,CAAC;QACvE,IAAI,CAACJ,MAAM,CAACW,GAAG,CAACR,EAAE,EAAEM,aAAa,CAAC;OACnC,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC;;KAEhD,MAAM;MACLD,OAAO,CAACC,KAAK,CAAC,mBAAmBV,EAAE,gBAAgB,CAAC;;EAExD;EAEA;EACAW,OAAOA,CAACX,EAAU;IAChB,MAAMY,KAAK,GAAG,IAAI,CAACf,MAAM,CAACgB,GAAG,CAACb,EAAE,CAAC;IACjC,IAAIY,KAAK,EAAE;MACTA,KAAK,CAACE,IAAI,EAAE;KACb,MAAM;MACL,IAAI,CAACf,WAAW,CAACC,EAAE,CAAC;MACpBe,UAAU,CAAC,MAAM,IAAI,CAACJ,OAAO,CAACX,EAAE,CAAC,EAAE,GAAG,CAAC;;EAE3C;EAEA;EACAgB,OAAOA,CAAChB,EAAU;IAChB,MAAMY,KAAK,GAAG,IAAI,CAACf,MAAM,CAACgB,GAAG,CAACb,EAAE,CAAC;IACjC,IAAIY,KAAK,EAAE;MACTA,KAAK,CAACK,IAAI,EAAE;;EAEhB;;;uBAtCWtB,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAuB,OAAA,EAAZvB,YAAY,CAAAwB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}