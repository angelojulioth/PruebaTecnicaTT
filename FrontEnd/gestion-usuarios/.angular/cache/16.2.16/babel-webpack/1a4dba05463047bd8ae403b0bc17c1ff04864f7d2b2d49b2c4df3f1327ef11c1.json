{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsuarioService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/usuarios`;\n  }\n  getUsuarios() {\n    return this.http.get(this.apiUrl).pipe(map(response => {\n      // Asegurarse de que la respuesta sea un array\n      if (response.data && Array.isArray(response.data)) {\n        return response.data;\n      }\n      // Si la respuesta ya es un array, devolverla directamente\n      if (Array.isArray(response)) {\n        return response;\n      }\n      // Si no hay datos, devolver array vacío\n      return [];\n    }));\n  }\n  // Obtener un usuario por ID\n  getUsuario(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  // Crear un nuevo usuario\n  crearUsuario(usuario) {\n    return this.http.post(this.apiUrl, usuario);\n  }\n  // Actualizar un usuario existente\n  actualizarUsuario(id, usuario) {\n    return this.http.put(`${this.apiUrl}/${id}`, usuario);\n  }\n  // Eliminar un usuario\n  eliminarUsuario(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  handleError(error) {\n    let errorMessage = 'Error desconocido';\n    if (error.error instanceof ErrorEvent) {\n      // Error del lado del cliente\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Error del lado del servidor\n      errorMessage = `Código de error: ${error.status}, mensaje: ${error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function UsuarioService_Factory(t) {\n      return new (t || UsuarioService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UsuarioService,\n      factory: UsuarioService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","environment","UsuarioService","constructor","http","apiUrl","getUsuarios","get","pipe","map","response","data","Array","isArray","getUsuario","id","crearUsuario","usuario","post","actualizarUsuario","put","eliminarUsuario","delete","handleError","error","errorMessage","ErrorEvent","message","status","console","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\angel\\JobProjects\\FrontEnd\\gestion-usuarios\\src\\app\\services\\usuario.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Usuario } from '../models/usuario.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsuarioService {\n  private apiUrl = `${environment.apiUrl}/usuarios`;\n\n  constructor(private http: HttpClient) {}\n\n  getUsuarios(): Observable<Usuario[]> {\n    return this.http.get<any>(this.apiUrl).pipe(\n      map((response) => {\n        // Asegurarse de que la respuesta sea un array\n        if (response.data && Array.isArray(response.data)) {\n          return response.data;\n        }\n        // Si la respuesta ya es un array, devolverla directamente\n        if (Array.isArray(response)) {\n          return response;\n        }\n        // Si no hay datos, devolver array vacío\n        return [];\n      })\n    );\n  }\n\n  // Obtener un usuario por ID\n  getUsuario(id: number): Observable<Usuario> {\n    return this.http.get<Usuario>(`${this.apiUrl}/${id}`);\n  }\n\n  // Crear un nuevo usuario\n  crearUsuario(usuario: Usuario): Observable<Usuario> {\n    return this.http.post<Usuario>(this.apiUrl, usuario);\n  }\n\n  // Actualizar un usuario existente\n  actualizarUsuario(id: number, usuario: Usuario): Observable<Usuario> {\n    return this.http.put<Usuario>(`${this.apiUrl}/${id}`, usuario);\n  }\n\n  // Eliminar un usuario\n  eliminarUsuario(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let errorMessage = 'Error desconocido';\n    if (error.error instanceof ErrorEvent) {\n      // Error del lado del cliente\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Error del lado del servidor\n      errorMessage = `Código de error: ${error.status}, mensaje: ${error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAG7C,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,WAAW;EAEV;EAEvCC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAM,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CACzCC,GAAG,CAAEC,QAAQ,IAAI;MACf;MACA,IAAIA,QAAQ,CAACC,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAACC,IAAI,CAAC,EAAE;QACjD,OAAOD,QAAQ,CAACC,IAAI;;MAEtB;MACA,IAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;QAC3B,OAAOA,QAAQ;;MAEjB;MACA,OAAO,EAAE;IACX,CAAC,CAAC,CACH;EACH;EAEA;EACAI,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACX,IAAI,CAACG,GAAG,CAAU,GAAG,IAAI,CAACF,MAAM,IAAIU,EAAE,EAAE,CAAC;EACvD;EAEA;EACAC,YAAYA,CAACC,OAAgB;IAC3B,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAU,IAAI,CAACb,MAAM,EAAEY,OAAO,CAAC;EACtD;EAEA;EACAE,iBAAiBA,CAACJ,EAAU,EAAEE,OAAgB;IAC5C,OAAO,IAAI,CAACb,IAAI,CAACgB,GAAG,CAAU,GAAG,IAAI,CAACf,MAAM,IAAIU,EAAE,EAAE,EAAEE,OAAO,CAAC;EAChE;EAEA;EACAI,eAAeA,CAACN,EAAU;IACxB,OAAO,IAAI,CAACX,IAAI,CAACkB,MAAM,CAAC,GAAG,IAAI,CAACjB,MAAM,IAAIU,EAAE,EAAE,CAAC;EACjD;EAEQQ,WAAWA,CAACC,KAAwB;IAC1C,IAAIC,YAAY,GAAG,mBAAmB;IACtC,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM;MACL;MACAF,YAAY,GAAG,oBAAoBD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAE9EE,OAAO,CAACL,KAAK,CAACC,YAAY,CAAC;IAC3B,OAAOzB,UAAU,CAAC,MAAM,IAAI8B,KAAK,CAACL,YAAY,CAAC,CAAC;EAClD;;;uBArDWvB,cAAc,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAdhC,cAAc;MAAAiC,OAAA,EAAdjC,cAAc,CAAAkC,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}